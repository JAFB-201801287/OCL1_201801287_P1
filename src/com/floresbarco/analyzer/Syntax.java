
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.floresbarco.analyzer;

import java_cup.runtime.Symbol;
import com.floresbarco.model.Node;
import com.floresbarco.model.Group;
import com.floresbarco.controller.TreeController;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\004\000\002\005\003\000\002\006\003\000" +
    "\002\007\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\003\000\002\010\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\012\000\002\012\012\000" +
    "\002\012\012\000\002\012\010\000\002\013\006\000\002" +
    "\014\005\000\002\014\005\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\005\000\002\014\003\000\002" +
    "\015\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\021\004\001\002\000\006\005\014\027" +
    "\013\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\010\005\014\024\ufffe\027\013\001\002\000" +
    "\010\005\ufffd\024\ufffd\027\ufffd\001\002\000\010\005\ufffc" +
    "\024\ufffc\027\ufffc\001\002\000\004\024\106\001\002\000" +
    "\006\025\102\027\101\001\002\000\004\020\047\001\002" +
    "\000\004\023\016\001\002\000\034\004\032\006\026\007" +
    "\030\010\020\011\034\012\033\013\017\014\025\021\024" +
    "\025\022\026\027\027\021\030\023\001\002\000\034\004" +
    "\032\006\026\007\030\010\020\011\034\012\033\013\017" +
    "\014\025\021\024\025\022\026\027\027\021\030\023\001" +
    "\002\000\034\004\032\006\026\007\030\010\020\011\034" +
    "\012\033\013\017\014\025\021\024\025\022\026\027\027" +
    "\021\030\023\001\002\000\036\004\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\017\uffe2\021" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\001\002\000\036" +
    "\004\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\017\uffe3\021\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\001\002\000\036\004\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\013\uffde\014\uffde\017\uffde\021\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\001\002\000\004\027" +
    "\013\001\002\000\034\004\032\006\026\007\030\010\020" +
    "\011\034\012\033\013\017\014\025\021\024\025\022\026" +
    "\027\027\021\030\023\001\002\000\036\004\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\017" +
    "\uffe0\021\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\001\002" +
    "\000\036\004\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\017\uffdc\021\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\001\002\000\036\004\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\017\uffdf" +
    "\021\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\001\002\000" +
    "\004\017\037\001\002\000\036\004\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\017\uffe1\021" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\001\002\000\034" +
    "\004\032\006\026\007\030\010\020\011\034\012\033\013" +
    "\017\014\025\021\024\025\022\026\027\027\021\030\023" +
    "\001\002\000\034\004\032\006\026\007\030\010\020\011" +
    "\034\012\033\013\017\014\025\021\024\025\022\026\027" +
    "\027\021\030\023\001\002\000\036\004\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\017\uffe5" +
    "\021\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\001\002\000" +
    "\036\004\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\017\uffe6\021\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\001\002\000\010\005\uffe9\024\uffe9\027\uffe9" +
    "\001\002\000\034\004\032\006\026\007\030\010\020\011" +
    "\034\012\033\013\017\014\025\021\024\025\022\026\027" +
    "\027\021\030\023\001\002\000\036\004\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\017\uffe7" +
    "\021\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\001\002\000" +
    "\004\022\043\001\002\000\036\004\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\017\uffdd\021" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\001\002\000\034" +
    "\004\032\006\026\007\030\010\020\011\034\012\033\013" +
    "\017\014\025\021\024\025\022\026\027\027\021\030\023" +
    "\001\002\000\036\004\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\017\uffe8\021\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\001\002\000\036\004\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\017\uffe4\021\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\001" +
    "\002\000\004\027\013\001\002\000\004\023\051\001\002" +
    "\000\010\025\054\027\053\030\055\001\002\000\004\017" +
    "\100\001\002\000\010\015\075\016\064\017\uffef\001\002" +
    "\000\010\015\072\016\066\017\ufff0\001\002\000\010\015" +
    "\056\016\057\017\uffee\001\002\000\004\030\070\001\002" +
    "\000\010\025\061\027\062\030\063\001\002\000\004\017" +
    "\ufff1\001\002\000\006\016\066\017\ufff0\001\002\000\006" +
    "\016\064\017\uffef\001\002\000\006\016\057\017\uffee\001" +
    "\002\000\010\025\061\027\062\030\063\001\002\000\004" +
    "\017\ufff2\001\002\000\010\025\061\027\062\030\063\001" +
    "\002\000\004\017\ufff3\001\002\000\004\017\071\001\002" +
    "\000\010\005\uffeb\024\uffeb\027\uffeb\001\002\000\004\025" +
    "\073\001\002\000\004\017\074\001\002\000\010\005\uffec" +
    "\024\uffec\027\uffec\001\002\000\004\027\076\001\002\000" +
    "\004\017\077\001\002\000\010\005\uffed\024\uffed\027\uffed" +
    "\001\002\000\010\005\uffea\024\uffea\027\uffea\001\002\000" +
    "\014\020\ufff5\022\ufff5\023\ufff5\025\102\027\101\001\002" +
    "\000\014\020\ufff4\022\ufff4\023\ufff4\025\102\027\101\001" +
    "\002\000\010\020\ufff8\022\ufff8\023\ufff8\001\002\000\010" +
    "\020\ufff6\022\ufff6\023\ufff6\001\002\000\010\020\ufff7\022" +
    "\ufff7\023\ufff7\001\002\000\004\024\107\001\002\000\004" +
    "\027\013\001\002\000\006\022\ufff9\027\ufff9\001\002\000" +
    "\004\022\120\001\002\000\004\020\115\001\002\000\006" +
    "\022\ufffa\027\013\001\002\000\004\022\ufffb\001\002\000" +
    "\004\026\116\001\002\000\004\017\117\001\002\000\006" +
    "\022\uffdb\027\uffdb\001\002\000\004\002\000\001\002\000" +
    "\004\024\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\002\004\001\001\000\014\003\011\004" +
    "\006\007\014\012\007\013\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\120\004\006\007\014\012" +
    "\007\013\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\030\001\001\000\004" +
    "\014\045\001\001\000\004\014\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\041" +
    "\001\001\000\004\014\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\035\001\001\000\004\014\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\047\001\001\000" +
    "\002\001\001\000\004\011\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\064\001\001\000\002\001\001\000\004\011\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\104\001\001\000\004\010\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\110\006\112\007\111" +
    "\015\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\113\006\112\007\111\015\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol symbol;
    private Integer countNode = 0;
    private Integer countIdentifier = 1;

    public void syntax_error(Symbol symbol){
        this.symbol = symbol;
    }

    public Symbol getSymbol(){
        return this.symbol;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= CurlyBracket1 SENTENCES1 DoublePercent DoublePercent SENTENCES2 CurlyBracket2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCES1 ::= SENTENCE1 SENTENCES1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCES1",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCES1 ::= SENTENCE1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCES1",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCE1 ::= JOIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCE1",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCE1 ::= EXPRESSIONS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCE1",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCES2 ::= SENTENCE2 SENTENCES2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCES2",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCES2 ::= SENTENCE2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCES2",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCE2 ::= TEST_STRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCE2",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // START_INDENTIFIER ::= Letter IDENTIFIER 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = ((String) l) + ((String) c); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("START_INDENTIFIER",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IDENTIFIER ::= Letter IDENTIFIER 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = ((String) l) + ((String) c); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDENTIFIER",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDENTIFIER ::= Digit IDENTIFIER 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = ((String) d) + ((String) c); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDENTIFIER",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IDENTIFIER ::= Letter 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = (String) l; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDENTIFIER",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IDENTIFIER ::= Digit 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = (String) d; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDENTIFIER",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ITEM_QUEUE ::= Digit Comma ITEM_QUEUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ITEM_QUEUE",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ITEM_QUEUE ::= Letter Comma ITEM_QUEUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ITEM_QUEUE",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ITEM_QUEUE ::= Character Comma ITEM_QUEUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ITEM_QUEUE",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ITEM_QUEUE ::= Digit 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ITEM_QUEUE",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ITEM_QUEUE ::= Letter 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ITEM_QUEUE",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ITEM_QUEUE ::= Character 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ITEM_QUEUE",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // JOIN ::= Conj Colon START_INDENTIFIER Arrow Letter Dash Letter Semicolon 
            {
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object key = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int letter1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int letter1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object letter1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int lletter2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int lletter2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object lletter2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		  
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("JOIN",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // JOIN ::= Conj Colon START_INDENTIFIER Arrow Digit Dash Digit Semicolon 
            {
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object key = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int digit1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int digit1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object digit1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int digit2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int digit2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object digit2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("JOIN",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // JOIN ::= Conj Colon START_INDENTIFIER Arrow Character Dash Character Semicolon 
            {
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object key = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int char1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int char1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object char1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int char2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int char2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object char2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("JOIN",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // JOIN ::= Conj Colon START_INDENTIFIER Arrow ITEM_QUEUE Semicolon 
            {
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object key = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("JOIN",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESSIONS ::= START_INDENTIFIER Arrow EXPRESSION Semicolon 
            {
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object key = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		TreeController.getInstance().addExpression(
(String) key,
new Node(countNode+1, ".", "", (Node) exp, new Node(countNode+2, "#", "", null, null, countIdentifier+1), ".")
);
countNode = 0;
countIdentifier = 1;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESSION ::= Dot EXPRESSION EXPRESSION 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Node(countNode, (String) sym, "", (Node) exp1, (Node) exp2, "."); countNode++; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESSION ::= VerticalBar EXPRESSION EXPRESSION 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Node(countNode, (String) sym, "", (Node) exp1, (Node) exp2, "|"); countNode++; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESSION ::= Asterisk EXPRESSION 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Node(countNode, (String) sym, "", (Node) exp, null, "*"); countNode++; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESSION ::= Plus EXPRESSION 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Node(countNode, (String) sym, "", (Node) exp, null, "+"); countNode++; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESSION ::= QuestionMarck EXPRESSION 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Node(countNode, (String) sym, "", (Node) exp, null, "?"); countNode++; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESSION ::= Digit 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Node(countNode, (String) exp, "", null, null, countIdentifier); countNode++; countIdentifier++; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESSION ::= Letter 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Node(countNode, (String) exp, "", null, null, countIdentifier); countNode++; countIdentifier++; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESSION ::= LineBreak 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Node(countNode, (String) exp, "", null, null, countIdentifier); countNode++; countIdentifier++; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESSION ::= QuotationMarks 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Node(countNode, (String) exp, "", null, null, countIdentifier); countNode++; countIdentifier++; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESSION ::= SingleQuotes 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Node(countNode, (String) exp, "", null, null, countIdentifier); countNode++; countIdentifier++; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESSION ::= Character 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Node(countNode, (String) exp, "", null, null, countIdentifier); countNode++; countIdentifier++; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESSION ::= CurlyBracket1 START_INDENTIFIER CurlyBracket2 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new Node(countNode, "", (String) exp, null, null, countIdentifier); countNode++; countIdentifier++; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESSION ::= String 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Node(countNode, (String) exp, "", null, null, countIdentifier); countNode++; countIdentifier++; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TEST_STRING ::= START_INDENTIFIER Colon String Semicolon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TEST_STRING",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
