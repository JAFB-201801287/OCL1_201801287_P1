package com.floresbarco.analyzer;

import java_cup.runtime.Symbol;
import com.floresbarco.model.Node;
import com.floresbarco.model.Group;
import com.floresbarco.controller.TreeController;

/* METODO PARSER -> RETORNA EL SIMBOLO ANALIZADO */
/*----------------------------------------------------------------------------------------------------------------------------------*/
parser code
{:
    private Symbol symbol;
    private Integer countNode = 0;
    private Integer countIdentifier = 1;

    public void syntax_error(Symbol symbol){
        this.symbol = symbol;
    }

    public Symbol getSymbol(){
        return this.symbol;
    }
:};

/* SIMBOLOS TERMINALES */
/*----------------------------------------------------------------------------------------------------------------------------------*/

terminal LineBreak,
         Conj,
         QuotationMarks, // COMILLAS (")
         SingleQuotes, // COMILLAS SIMPLES (')
         Dot, // PUNTO (.)
         Plus, // MAS (+)
         Asterisk, // ASTERISCO (*)
         QuestionMarck, // SIGNO DE INTERROGACION (?)
         VerticalBar, // BARRA VERTICA (|)
         Dash, // GUION (~)
         Comma, // COMA (,)
         Semicolon, // PUNTO Y COMA (;)
         Colon, // DOS PUNTOS (:)
         CurlyBracket1, // LLAVE DE INICIO ({)
         CurlyBracket2, // LLAVE DE CIERRE (})
         Arrow, // FLECHA (->)
         DoublePercent, // DOBLE PORCENTAJE (/%)
         Digit,
         String,
         Letter,
         Character;

/* SIMBOLOS NO TERMINALES */
/*----------------------------------------------------------------------------------------------------------------------------------*/

non terminal START,
             SENTENCES1,
             SENTENCE1,
             SENTENCES2,
             SENTENCE2,
             START_INDENTIFIER,
             IDENTIFIER,
             ITEM_QUEUE,
             JOIN,
             EXPRESSIONS,
             EXPRESSION,
             TEST_STRING;

// SE DEFINI INICIO COMO PRIMER NO TERMINAL
start with START;

/* PRODUCCIONES */
/*----------------------------------------------------------------------------------------------------------------------------------*/

START ::= CurlyBracket1 SENTENCES1 DoublePercent DoublePercent SENTENCES2 CurlyBracket2;

SENTENCES1 ::= SENTENCE1 SENTENCES1
             | SENTENCE1;

SENTENCE1 ::= JOIN
            | EXPRESSIONS;

SENTENCES2 ::= SENTENCE2 SENTENCES2
             | SENTENCE2;

SENTENCE2 ::= TEST_STRING;

START_INDENTIFIER ::= Letter:l IDENTIFIER:c {: RESULT = ((String) l) + ((String) c); :};

IDENTIFIER ::= Letter:l IDENTIFIER:c {: RESULT = ((String) l) + ((String) c); :}
             | Digit:d IDENTIFIER:c {: RESULT = ((String) d) + ((String) c); :}
             | Letter:l {: RESULT = (String) l; :}
             | Digit:d {: RESULT = (String) d; :};

ITEM_QUEUE ::= Digit Comma ITEM_QUEUE
             | Letter Comma ITEM_QUEUE
             | Character Comma ITEM_QUEUE
             | Digit
             | Letter
             | Character;

JOIN ::= Conj Colon START_INDENTIFIER:key Arrow Letter:letter1 Dash Letter:lletter2 Semicolon {:  :}
       | Conj Colon START_INDENTIFIER:key Arrow Digit:digit1 Dash Digit:digit2 Semicolon
       | Conj Colon START_INDENTIFIER:key Arrow Character:char1 Dash Character:char2 Semicolon
       | Conj Colon START_INDENTIFIER:key Arrow ITEM_QUEUE Semicolon;

EXPRESSIONS ::= START_INDENTIFIER:key Arrow EXPRESSION:exp Semicolon {:TreeController.getInstance().addExpression(
(String) key,
new Node(countNode+1, ".", "", (Node) exp, new Node(countNode+2, "#", "", null, null, countIdentifier+1), ".")
);
countNode = 0;
countIdentifier = 1;
:};

EXPRESSION ::= Dot:sym EXPRESSION:exp1 EXPRESSION:exp2 {: RESULT = new Node(countNode, (String) sym, "", (Node) exp1, (Node) exp2, "."); countNode++; :}
             | VerticalBar:sym EXPRESSION:exp1 EXPRESSION:exp2 {: RESULT = new Node(countNode, (String) sym, "", (Node) exp1, (Node) exp2, "|"); countNode++; :}
             | Asterisk:sym EXPRESSION:exp {: RESULT = new Node(countNode, (String) sym, "", (Node) exp, null, "*"); countNode++; :}
             | Plus:sym EXPRESSION:exp {: RESULT = new Node(countNode, (String) sym, "", (Node) exp, null, "+"); countNode++; :}
             | QuestionMarck:sym EXPRESSION:exp {: RESULT = new Node(countNode, (String) sym, "", (Node) exp, null, "?"); countNode++; :}
             | Digit:exp {: RESULT = new Node(countNode, (String) exp, "", null, null, countIdentifier); countNode++; countIdentifier++; :}
             | Letter:exp {: RESULT = new Node(countNode, (String) exp, "", null, null, countIdentifier); countNode++; countIdentifier++; :}
             | LineBreak:exp {: RESULT = new Node(countNode, (String) exp, "", null, null, countIdentifier); countNode++; countIdentifier++; :}
             | QuotationMarks:exp {: RESULT = new Node(countNode, (String) exp, "", null, null, countIdentifier); countNode++; countIdentifier++; :}
             | SingleQuotes:exp {: RESULT = new Node(countNode, (String) exp, "", null, null, countIdentifier); countNode++; countIdentifier++; :}
             | Character:exp {: RESULT = new Node(countNode, (String) exp, "", null, null, countIdentifier); countNode++; countIdentifier++; :}
             | CurlyBracket1 START_INDENTIFIER:exp CurlyBracket2 {: RESULT = new Node(countNode, "", (String) exp, null, null, countIdentifier); countNode++; countIdentifier++; :}
             | String:exp {: RESULT = new Node(countNode, (String) exp, "", null, null, countIdentifier); countNode++; countIdentifier++; :};

TEST_STRING ::= START_INDENTIFIER Colon String Semicolon;